{"ast":null,"code":"import _objectSpread from\"/workspace/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{dutchTrainStations}from'../data/trainStations';// Mock data for demonstration - in a real app, this would come from APIs\nconst mockResults=[{id:'1',name:'Albert Heijn',type:'Supermarket',address:'Stationsplein 1',lat:52.3801,lng:4.9013,rating:4.2},{id:'2',name:'McDonald\\'s',type:'Restaurant',address:'Stationsplein 5',lat:52.3785,lng:4.8995,rating:3.8,openingHours:'24/7'},{id:'3',name:'Fitness First',type:'Gym',address:'Damrak 10',lat:52.3761,lng:4.8950,rating:4.5},{id:'4',name:'Pathé Cinema',type:'Cinema',address:'Nieuwezijds Voorburgwal 120',lat:52.3720,lng:4.8920,rating:4.3}];// Calculate distance between two coordinates using Haversine formula\nfunction calculateDistance(lat1,lng1,lat2,lng2){const R=6371;// Earth's radius in kilometers\nconst dLat=(lat2-lat1)*Math.PI/180;const dLng=(lng2-lng1)*Math.PI/180;const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(lat1*Math.PI/180)*Math.cos(lat2*Math.PI/180)*Math.sin(dLng/2)*Math.sin(dLng/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}export async function searchLocations(filters){// Find the selected train station\nconst station=dutchTrainStations.find(s=>s.id===filters.stationId);if(!station)return[];// In a real implementation, you would call external APIs here:\n// - Overpass API for OpenStreetMap data\n// - Google Places API\n// - Foursquare API\n// - Local business directories\n// For demo purposes, generate results around the station\nconst results=[];for(const mockResult of mockResults){// Add some randomness to position results around the station\nconst randomLat=station.lat+(Math.random()-0.5)*0.01;const randomLng=station.lng+(Math.random()-0.5)*0.01;const distance=calculateDistance(station.lat,station.lng,randomLat,randomLng);// Only include results within the specified distance\nif(distance<=filters.distance){// Filter by category if specified\nif(filters.category===''||filters.category==='all'||mockResult.type.toLowerCase().includes(filters.category.toLowerCase())){// Filter by search query if specified\nif(filters.query===''||mockResult.name.toLowerCase().includes(filters.query.toLowerCase())||mockResult.type.toLowerCase().includes(filters.query.toLowerCase())){results.push(_objectSpread(_objectSpread({},mockResult),{},{lat:randomLat,lng:randomLng,distance:Math.round(distance*100)/100,trainStation:station}));}}}}// Sort by distance\nreturn results.sort((a,b)=>a.distance-b.distance);}export function getTrainStations(){return dutchTrainStations;}","map":{"version":3,"names":["dutchTrainStations","mockResults","id","name","type","address","lat","lng","rating","openingHours","calculateDistance","lat1","lng1","lat2","lng2","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","searchLocations","filters","station","find","s","stationId","results","mockResult","randomLat","random","randomLng","distance","category","toLowerCase","includes","query","push","_objectSpread","round","trainStation","sort","b","getTrainStations"],"sources":["/workspace/src/services/api.ts"],"sourcesContent":["import { SearchResult, SearchFilters, TrainStation } from '../types';\nimport { dutchTrainStations } from '../data/trainStations';\n\n// Mock data for demonstration - in a real app, this would come from APIs\nconst mockResults: Omit<SearchResult, 'trainStation' | 'distance'>[] = [\n  {\n    id: '1',\n    name: 'Albert Heijn',\n    type: 'Supermarket',\n    address: 'Stationsplein 1',\n    lat: 52.3801,\n    lng: 4.9013,\n    rating: 4.2\n  },\n  {\n    id: '2',\n    name: 'McDonald\\'s',\n    type: 'Restaurant',\n    address: 'Stationsplein 5',\n    lat: 52.3785,\n    lng: 4.8995,\n    rating: 3.8,\n    openingHours: '24/7'\n  },\n  {\n    id: '3',\n    name: 'Fitness First',\n    type: 'Gym',\n    address: 'Damrak 10',\n    lat: 52.3761,\n    lng: 4.8950,\n    rating: 4.5\n  },\n  {\n    id: '4',\n    name: 'Pathé Cinema',\n    type: 'Cinema',\n    address: 'Nieuwezijds Voorburgwal 120',\n    lat: 52.3720,\n    lng: 4.8920,\n    rating: 4.3\n  }\n];\n\n// Calculate distance between two coordinates using Haversine formula\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLng = (lng2 - lng1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\nexport async function searchLocations(filters: SearchFilters): Promise<SearchResult[]> {\n  // Find the selected train station\n  const station = dutchTrainStations.find(s => s.id === filters.stationId);\n  if (!station) return [];\n\n  // In a real implementation, you would call external APIs here:\n  // - Overpass API for OpenStreetMap data\n  // - Google Places API\n  // - Foursquare API\n  // - Local business directories\n\n  // For demo purposes, generate results around the station\n  const results: SearchResult[] = [];\n  \n  for (const mockResult of mockResults) {\n    // Add some randomness to position results around the station\n    const randomLat = station.lat + (Math.random() - 0.5) * 0.01;\n    const randomLng = station.lng + (Math.random() - 0.5) * 0.01;\n    \n    const distance = calculateDistance(station.lat, station.lng, randomLat, randomLng);\n    \n    // Only include results within the specified distance\n    if (distance <= filters.distance) {\n      // Filter by category if specified\n      if (filters.category === '' || \n          filters.category === 'all' || \n          mockResult.type.toLowerCase().includes(filters.category.toLowerCase())) {\n        \n        // Filter by search query if specified\n        if (filters.query === '' || \n            mockResult.name.toLowerCase().includes(filters.query.toLowerCase()) ||\n            mockResult.type.toLowerCase().includes(filters.query.toLowerCase())) {\n          \n          results.push({\n            ...mockResult,\n            lat: randomLat,\n            lng: randomLng,\n            distance: Math.round(distance * 100) / 100,\n            trainStation: station\n          });\n        }\n      }\n    }\n  }\n\n  // Sort by distance\n  return results.sort((a, b) => a.distance - b.distance);\n}\n\nexport function getTrainStations(): TrainStation[] {\n  return dutchTrainStations;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}